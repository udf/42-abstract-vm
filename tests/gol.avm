; debug marker
push int32(-420)

; current y, x
push int32(0)
push int32(0)

; neighbour count
push int32(0)

; data
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(1)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(1)
push int8(0)
push int8(1)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(1)
push int8(1)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)
push int8(0)

; rotate to marker
push int32(1)
rot

loop_start:

call do_cell_logic

; rotate to x
push int32(2)
rot
; increment x
push int32(1)
add

; x < width
call width
jlt loop_restart

; x = 0
pop
push int32(0)
; increment y
push int32(-1)
rot
push int32(1)
add

; y < height
call height
jlt loop_restart

; y = 0
pop
push int32(0)
jmp loop_end

loop_restart:
push int32(-1)
rot
push int32(-420)
je loop_start
push int32(-1)
rot
push int32(-420)
je loop_start
assert float(0) ;should never happen

loop_end:
; jump to old cells
push int32(3)
rot

; save w*h
call width
call height
mul
save

; clear screen
push int8(27) ; ESC
print
pop
push int8(99) ; c
print
pop

print_loop:
; pop counter
pop

; print cell
push int32(1)
je print_1
; print_0
push int8(45) ; -
print
pop
jmp print_loop_cont

print_1:
push int8(73) ; I
print
pop

print_loop_cont:
push int8(32)
print
pop

; pop cell
pop

; newline if (i - 1) % w == 0
load
push int32(1)
sub
call width
mod
push int32(0)
jne print_loop_end
push int8(10)
print
pop

print_loop_end:
; pop temp
pop
push int32(1)
rot

load
push int32(1)
sub
save

push int32(0)
jne print_loop

; pop counter
pop

; jump to marker

push int32(-4)
rot

jmp loop_start



do_cell_logic:
; reset neighbour counter
push int32(3)
rot
pop
push int32(0)
push int32(-3)
rot

; add y+1,x to the neighbour counter
call logic1
push int32(1)
add
call logic2
call logic3
call logic4

; add y-1,x to the neighbour counter
call logic1
push int32(1)
sub
call logic2
call logic3
call logic4

; add y,x+1 to the neighbour counter
call logic1
call logic2
push int32(1)
add
call logic3
call logic4

; add y,x-1 to the neighbour counter
call logic1
call logic2
push int32(1)
sub
call logic3
call logic4

; add y-1,x-1 to the neighbour counter
call logic1
push int32(1)
sub
call logic2
push int32(1)
sub
call logic3
call logic4

; add y+1,x-1 to the neighbour counter
call logic1
push int32(1)
add
call logic2
push int32(1)
sub
call logic3
call logic4

; add y-1,x+1 to the neighbour counter
call logic1
push int32(1)
sub
call logic2
push int32(1)
add
call logic3
call logic4

; add y+1,x+1 to the neighbour counter
call logic1
push int32(1)
add
call logic2
push int32(1)
add
call logic3
call logic4

; copy the current cell after the neighbour counter
call logic1
call logic2
call logic3

push int32(1)
je on_alive

;on_dead
; remove cell
pop
; if ncount == 3
push int32(3)
je set_alive
jmp set_dead

on_alive:
; remove cell
pop
; if ncount < 2 (ncount == {0, 1})
push int32(2)
jlt set_dead
; if ncount > 3 (ncount == {4, 5, 6, 7, 8})
push int32(3)
jgt set_dead
; if ncount == {2,3}

set_alive:
push int32(1)
save
pop
jmp store_cell
set_dead:
push int32(0)
save
pop

store_cell:
push int32(-4)
rot
load
push int32(1)
rot
ret


width:
push int32(10)
ret


height:
push int32(10)
ret


logic1:
assert int32(-420)
; copy current y
push int32(1)
rot
save
push int32(2)
rot
load
ret


logic2:
; add height so y is always positive
call height
save
add
; mod y by height (wraparound)
load
mod
; multiply y by width
call width
mul
; copy current x
push int32(-2)
rot
save
push int32(2)
rot
load
ret


logic3:
; add width so x is always positive
call width
save
add
; mod x by width
load
mod
; add x to (y * w)
add
;save this value
save
pop
; jump to beginning of cells
push int32(1)
rot
; jump to the cell
load
rot
; load and invert the offset so we know how to get back
load
push int32(-1)
mul
push int32(-1)
rot
; save the cell value
save
; go back to the beginning
push int32(1)
rot
rot
; go to the cell count
push int32(-1)
rot
; load the saved cell next to the counter
load
ret


logic4:
; add the saved cell to the counter
add
; go back to the marker
push int32(-3)
rot
ret